<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.charlie.app.core.modular.problem.submit.mapper.ProSubmitMapper">

    <select id="getLanguageDistribution" resultType="io.charlie.galaxy.option.NameOption">
        SELECT
            language AS name,
            COUNT(*) AS value
        FROM
            pro_submit
        WHERE
            deleted = 0
        GROUP BY
            language
        ORDER BY
            COUNT(*) DESC
    </select>

    <select id="getProblemRateDistribution" resultType="io.charlie.galaxy.option.NameOption">
        SELECT
            t2.title AS name,
            CONCAT(ROUND((SUM(CASE WHEN t1.solved = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2)) AS value
        FROM
            pro_solved t1,
            pro_problem t2
        WHERE
            t1.deleted = 0 AND t1.problem_id = t2.id AND t2.deleted = 0
        GROUP BY
            t1.problem_id
        ORDER BY
            (SUM(CASE WHEN t1.solved = 1 THEN 1 ELSE 0 END) / COUNT(*)) DESC
    </select>

    <select id="getWeeklySubmitTrend"
            resultType="io.charlie.app.core.modular.analyse.entity.SubmitTrend">
        SELECT
            date_series.date AS data,
            COALESCE(s.submit_count, 0) AS submitCount,
            COALESCE(sol.solved_count, 0) AS passCount
        FROM (
                 SELECT DATE(DATE_SUB(CURDATE(), INTERVAL n DAY)) AS date
        FROM (
            SELECT 0 AS n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3
            UNION SELECT 4 UNION SELECT 5 UNION SELECT 6
            ) AS numbers
            ) AS date_series
            LEFT JOIN (
        SELECT
            DATE(ps.create_time) AS submit_date,
            COUNT(*) AS submit_count
        FROM
            pro_submit ps
        WHERE
            ps.create_time >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
          AND ps.deleted = 0
        GROUP BY
            DATE(ps.create_time)
            ) s ON date_series.date = s.submit_date
            LEFT JOIN (
            SELECT
            DATE(ps.create_time) AS solve_date,
            COUNT(DISTINCT ps.problem_id, ps.user_id) AS solved_count
            FROM
            pro_solved ps
            WHERE
            ps.create_time >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
            AND ps.solved = 1
            AND ps.deleted = 0
            GROUP BY
            DATE(ps.create_time)
            ) sol ON date_series.date = sol.solve_date
        ORDER BY
            date_series.date ASC
    </select>

    <select id="getTodayHourlySubmitTrend" resultType="io.charlie.app.core.modular.analyse.entity.SubmitTrend">
        SELECT
            hours.hour AS data,
            COALESCE(s.submit_count, 0) AS submitCount,
            COALESCE(sol.solved_count, 0) AS passCount
        FROM (
                 SELECT 0 AS hour UNION SELECT 1 UNION SELECT 2 UNION SELECT 3
                 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7
                 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11
                 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15
                 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19
                 UNION SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23
             ) AS hours
                 LEFT JOIN (
            SELECT
                HOUR(ps.create_time) AS submit_hour,
                COUNT(*) AS submit_count
            FROM
                pro_submit ps
            WHERE
                DATE(ps.create_time) = CURDATE()
              AND ps.deleted = 0
            GROUP BY
                HOUR(ps.create_time)
        ) s ON hours.hour = s.submit_hour
                 LEFT JOIN (
            SELECT
                HOUR(ps.create_time) AS solve_hour,
                COUNT(DISTINCT ps.problem_id, ps.user_id) AS solved_count
            FROM
                pro_solved ps
            WHERE
                DATE(ps.create_time) = CURDATE()
              AND ps.solved = 1
              AND ps.deleted = 0
            GROUP BY
                HOUR(ps.create_time)
        ) sol ON hours.hour = sol.solve_hour
        ORDER BY
            hours.hour ASC
    </select>

</mapper>
