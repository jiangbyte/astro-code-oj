<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.charlie.app.core.modular.set.ranking.mapper.SetUserRankingMapper">

    <resultMap id="RankingResultMap" type="io.charlie.app.core.modular.set.ranking.entity.SetUserRanking">
        <id property="userId" column="user_id"/>
        <result property="nickname" column="nickname"/>
        <result property="avatar" column="avatar"/>
        <result property="setId" column="set_id"/>
        <result property="solvedCount" column="solved_count"/>
        <result property="attemptedCount" column="attempted_count"/>
        <result property="acceptanceRate" column="acceptance_rate"/>
        <result property="submissionCount" column="submission_count"/>
        <result property="executionCount" column="execution_count"/>
        <result property="totalSubmissionCount" column="total_submission_count"/>
        <result property="ranking" column="ranking"/>
    </resultMap>

    <select id="selectTotalRankingPage" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id                                                         AS user_id,
                                   u.nickname                                                   AS nickname,
                                   u.avatar                                                     AS avatar,
                                   s.problem_set_id                                             AS set_id,
                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id)                                 AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END                                                      AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END)          AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END)          AS execution_count,
                                   COUNT(sb.id)                                                 AS total_submission_count,
                                   MAX(sb.create_time)                                          AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN
                                 pro_set_solved s ON u.id = s.user_id AND s.deleted = 0
                                     LEFT JOIN
                                 pro_set_submit sb ON u.id = sb.user_id AND sb.deleted = 0
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar, s.problem_set_id),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                                    FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        ${ew.customSqlSegment}
    </select>
    <select id="selectMonthlyRankingPage" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id AS user_id,
                                   u.nickname AS nickname,
                                   u.avatar AS avatar,
                                   s.problem_set_id                                             AS set_id,
                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id) AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END) AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END) AS execution_count,
                                   COUNT(sb.id) AS total_submission_count,
                                   MAX(sb.create_time) AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN pro_set_solved s ON
                                u.id = s.user_id AND
                                s.deleted = 0 AND
                                s.create_time >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') AND
        <![CDATA[s.create_time < DATE_FORMAT(DATE_ADD(CURRENT_DATE, INTERVAL 1 MONTH), '%Y-%m-01')]]>
                                     LEFT JOIN pro_set_submit sb ON
                                u.id = sb.user_id AND
                                sb.deleted = 0 AND
                                sb.create_time >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') AND
        <![CDATA[sb.create_time< DATE_FORMAT(DATE_ADD(CURRENT_DATE, INTERVAL 1 MONTH), '%Y-%m-01')]]>
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        ${ew.customSqlSegment}
    </select>
    <select id="selectWeeklyRankingPage" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id                                                         AS user_id,
                                   u.nickname                                                   AS nickname,
                                   u.avatar                                                     AS avatar,
                                   s.problem_set_id                                             AS set_id,

                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id)                                 AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END                                                      AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END)          AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END)          AS execution_count,
                                   COUNT(sb.id)                                                 AS total_submission_count,
                                   MAX(sb.create_time)                                          AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN pro_set_solved s ON
                                u.id = s.user_id AND
                                s.deleted = 0 AND
                                s.create_time >= DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY) AND
        <![CDATA[s.create_time < DATE_ADD(DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY), INTERVAL 7 DAY)]]>
                                     LEFT JOIN pro_set_submit sb ON
                                u.id = sb.user_id AND
                                sb.deleted = 0 AND
                                sb.create_time >= DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY) AND
        <![CDATA[sb.create_time < DATE_ADD(DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY), INTERVAL 7 DAY)]]>
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        ${ew.customSqlSegment}
    </select>
    <select id="selectDailyRankingPage" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id                                                         AS user_id,
                                   u.nickname                                                   AS nickname,
                                   u.avatar                                                     AS avatar,
                                   s.problem_set_id                                             AS set_id,

                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id)                                 AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END                                                      AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END)          AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END)          AS execution_count,
                                   COUNT(sb.id)                                                 AS total_submission_count,
                                   MAX(sb.create_time)                                          AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN pro_set_solved s ON
                                u.id = s.user_id AND
                                s.deleted = 0 AND
                                s.create_time >= CURRENT_DATE AND
        <![CDATA[s.create_time < DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY)]]>
                                     LEFT JOIN pro_set_submit sb ON
                                u.id = sb.user_id AND
                                sb.deleted = 0 AND
                                sb.create_time >= CURRENT_DATE AND
        <![CDATA[sb.create_time < DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY)]]>
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        ${ew.customSqlSegment}
    </select>

    <select id="selectTotalRankingByUserId" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id                                                         AS user_id,
                                   u.nickname                                                   AS nickname,
                                   u.avatar                                                     AS avatar,
                                   s.problem_set_id                                             AS set_id,
                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id)                                 AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END                                                      AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END)          AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END)          AS execution_count,
                                   COUNT(sb.id)                                                 AS total_submission_count,
                                   MAX(sb.create_time)                                          AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN
                                 pro_set_solved s ON u.id = s.user_id AND s.deleted = 0
                                     LEFT JOIN
                                 pro_set_submit sb ON u.id = sb.user_id AND sb.deleted = 0
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        WHERE user_id = #{userId} AND set_id = #{setId}
    </select>
    <select id="selectMonthlyRankingByUserId" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id AS user_id,
                                   u.nickname AS nickname,
                                   u.avatar AS avatar,
                                   s.problem_set_id                                             AS set_id,
                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id) AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END) AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END) AS execution_count,
                                   COUNT(sb.id) AS total_submission_count,
                                   MAX(sb.create_time) AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN pro_set_solved s ON
                                u.id = s.user_id AND
                                s.deleted = 0 AND
                                s.create_time >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') AND
        <![CDATA[s.create_time < DATE_FORMAT(DATE_ADD(CURRENT_DATE, INTERVAL 1 MONTH), '%Y-%m-01')]]>
                                     LEFT JOIN pro_set_submit sb ON
                                u.id = sb.user_id AND
                                sb.deleted = 0 AND
                                sb.create_time >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') AND
        <![CDATA[sb.create_time< DATE_FORMAT(DATE_ADD(CURRENT_DATE, INTERVAL 1 MONTH), '%Y-%m-01')]]>
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        WHERE user_id = #{userId} AND set_id = #{setId}
    </select>
    <select id="selectWeeklyRankingByUserId" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id                                                         AS user_id,
                                   u.nickname                                                   AS nickname,
                                   u.avatar                                                     AS avatar,
                                   s.problem_set_id                                             AS set_id,
                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id)                                 AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END                                                      AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END)          AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END)          AS execution_count,
                                   COUNT(sb.id)                                                 AS total_submission_count,
                                   MAX(sb.create_time)                                          AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN pro_set_solved s ON
                                u.id = s.user_id AND
                                s.deleted = 0 AND
                                s.create_time >= DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY) AND
        <![CDATA[s.create_time < DATE_ADD(DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY), INTERVAL 7 DAY)]]>
                                     LEFT JOIN pro_set_submit sb ON
                                u.id = sb.user_id AND
                                sb.deleted = 0 AND
                                sb.create_time >= DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY) AND
        <![CDATA[sb.create_time < DATE_ADD(DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE) DAY), INTERVAL 7 DAY)]]>
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        WHERE user_id = #{userId} AND set_id = #{setId}
    </select>
    <select id="selectDailyRankingByUserId" resultMap="RankingResultMap">
        WITH user_stats AS (SELECT u.id                                                         AS user_id,
                                   u.nickname                                                   AS nickname,
                                   u.avatar                                                     AS avatar,
                                   s.problem_set_id                                             AS set_id,
                                   COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) AS solved_count,
                                   COUNT(DISTINCT s.problem_id)                                 AS attempted_count,
                                   CASE
                                       WHEN COUNT(DISTINCT s.problem_id) = 0 THEN 0
                                       ELSE ROUND(COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.problem_id END) * 100.0 / COUNT(DISTINCT s.problem_id), 2)
                                       END                                                      AS acceptance_rate,
                                   SUM(CASE WHEN sb.submit_type = 1 THEN 1 ELSE 0 END)          AS submission_count,
                                   SUM(CASE WHEN sb.submit_type = 0 THEN 1 ELSE 0 END)          AS execution_count,
                                   COUNT(sb.id)                                                 AS total_submission_count,
                                   MAX(sb.create_time)                                          AS last_solved_time
                            FROM sys_user u
                                     LEFT JOIN pro_set_solved s ON
                                u.id = s.user_id AND
                                s.deleted = 0 AND
                                s.create_time >= CURRENT_DATE AND
        <![CDATA[s.create_time < DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY)]]>
                                     LEFT JOIN pro_set_submit sb ON
                                u.id = sb.user_id AND
                                sb.deleted = 0 AND
                                sb.create_time >= CURRENT_DATE AND
        <![CDATA[sb.create_time < DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY)]]>
                            WHERE u.deleted = 0
                            GROUP BY u.id, u.username, u.nickname, u.avatar),
             ranked_users AS (SELECT user_id,
                                     nickname,
                                     avatar,
                                     set_id,
                                     solved_count,
                                     attempted_count,
                                     acceptance_rate,
                                     submission_count,
                                     execution_count,
                                     total_submission_count,
                                     ROW_NUMBER() OVER (ORDER BY solved_count DESC, acceptance_rate DESC) AS ranking
                              FROM user_stats)
        SELECT user_id,
               nickname,
               avatar,
               set_id,
               solved_count,
               attempted_count,
               acceptance_rate,
               submission_count,
               execution_count,
               total_submission_count,
               ranking
        FROM ranked_users
        WHERE user_id = #{userId} AND set_id = #{setId}
    </select>
</mapper>
